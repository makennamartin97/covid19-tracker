{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid4.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","covid4","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,mOCiEpJC,EA3DD,SAAC,GAAwD,IAAD,IAAtDC,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACjD,OAAIH,EAIA,qBAAKI,UAAWC,IAAOC,UAAvB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,SAApC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,UAA7E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,yCAIR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,WAA7E,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,uCAIR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,QAA7E,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACIC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,IACVC,UAAU,QAGlB,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,wCAjDT,c,yBCPTQ,EAAM,iCAECC,EAAS,uCAAG,WAAMC,GAAN,2BAAAC,EAAA,6DACjBC,EAAgBJ,EACjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAHnB,kBAMgDG,IAAMC,IAAIF,GAN1D,2BAMVnC,KAAOC,EANG,EAMHA,UAAWC,EANR,EAMQA,UAAWC,EANnB,EAMmBA,OAAQC,EAN3B,EAM2BA,WAN3B,kBAUV,CAAEH,YAAWC,YAAWC,SAAQC,eAVtB,2HAAH,sDA4BTkC,EAAc,uCAAG,8BAAAJ,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEd/B,EAFc,EAEdA,KAFc,kBAIfA,EAAKuC,KAAI,gBAAGtC,EAAH,EAAGA,UAAWE,EAAd,EAAcA,OAAoBqC,EAAlC,EAAsBC,WAAtB,MAA8C,CAAExC,UAAWA,EAAUyC,MAAOvC,OAAQA,EAAOuC,MAAOF,YAJ5F,wHAAH,qDAUdG,EAAc,uCAAG,8BAAAT,EAAA,+EAEYE,IAAMC,IAAN,UAAaN,EAAb,eAFZ,uBAERa,EAFQ,EAEf5C,KAAO4C,UAFQ,kBAGfA,EAAUL,KAAI,SAACN,GAAD,OAAaA,EAAQY,SAHpB,wHAAH,qD,yBC8BZC,EAlED,SAAC,GAAqD,IAAD,IAAnD9C,KAAOC,EAA4C,EAA5CA,UAAWE,EAAiC,EAAjCA,OAAQD,EAAyB,EAAzBA,UAAY+B,EAAa,EAAbA,QAAa,EAC7Bc,mBAAS,IADoB,mBACxDC,EADwD,KAC7CC,EAD6C,KAG/DC,qBAAU,YACQ,uCAAG,sBAAAhB,EAAA,kEACbe,EADa,SACMX,IADN,6EAAH,qDAIda,KAED,IACH,IAAMC,EACFJ,EAAUK,OAEF,cAAC,OAAD,CACIrD,KAAM,CACFsD,OAAQN,EAAUT,KAAI,qBAAEC,QACxBe,SAAU,CAAC,CACPvD,KAAMgD,EAAUT,KAAI,qBAAEtC,aACtBuD,MAAO,WACPC,YAAa,oBACbC,gBAAiB,oBACjBC,MAAM,GACP,CACC3D,KAAMgD,EAAUT,KAAI,qBAAEpC,UACtBqD,MAAO,SACPC,YAAa,oBACbC,gBAAiB,oBACjBC,MAAM,OAGZ,KAEZC,EACF3D,EAEQ,cAAC,MAAD,CACID,KAAM,CACFsD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPE,gBAAiB,CACb,oBACA,oBACA,qBAEJ1D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAIxDmC,QAAS,CACLC,OAAQ,CAACC,SAAS,GAClBC,MAAO,CAACD,SAAS,EAAME,KAAK,oBAAD,OAAsBhC,OAGzD,KAKZ,OACI,qBAAK5B,UAAWC,IAAOC,UAAvB,SACK0B,EAAU2B,EAAWR,K,mCC3CnBc,EApBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACGpB,mBAAS,IADZ,mBACtCqB,EADsC,KACpBC,EADoB,KAW7C,OATAnB,qBAAU,YACQ,uCAAG,sBAAAhB,EAAA,kEACbmC,EADa,SACa1B,IADb,6EAAH,qDAGdQ,KAED,CAACkB,IAIA,cAACC,EAAA,EAAD,CAAajE,UAAWC,IAAOiE,YAA/B,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAMR,EAAoBQ,EAAEC,OAAOlD,QAA3E,UACI,wBAAQA,MAAM,GAAd,oBACC0C,EAAiB7B,KAAI,SAACN,EAAS4C,GAAV,OAAe,yBAAgBnD,MAAOO,EAAvB,cAAkCA,IAArB4C,Y,iBCpBnD,MAA0B,mCC6C1BC,E,4MAhCbC,MAAQ,CACN/E,KAAM,GACNiC,QAAS,I,EAUXkC,oB,uCAAsB,WAAOlC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACd+C,EADc,OAEpB,EAAKC,SAAS,CAACjF,KAAMgF,EAAa/C,QAASA,IAFvB,2C,wPALMD,I,OAApBgD,E,OACNE,KAAKD,SAAS,CAAEjF,KAAMgF,I,qIAUd,IAAD,EAEiBE,KAAKH,MAAtB/E,EAFA,EAEAA,KAAMiC,EAFN,EAEMA,QACb,OACE,sBAAM5B,UAAWC,IAAOC,UAAxB,UACE,qBAAKF,UAAWC,IAAO6E,MAAOC,IAAKC,EAAQC,IAAI,aAC/C,cAAC,EAAD,CAAOtF,KAAMA,IACb,cAAC,EAAD,CAAemE,oBAAqBe,KAAKf,sBACzC,cAAC,EAAD,CAAOnE,KAAMA,EAAMiC,QAASA,W,GA5BlBsD,IAAMC,WCPxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,mBCP1BhG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,sC","file":"static/js/main.42913155.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\n\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n    if(!confirmed){\n        return 'Loading...'\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases</Typography>\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries</Typography>\n                    </CardContent>\n\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h6\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths</Typography>\n                    </CardContent>\n\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async(country) => {\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`;\n    }\n    try {\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n        // adding second curly brackets inside to structure the data and not have to \n        // repeat data.etc below\n\n        return { confirmed, recovered, deaths, lastUpdate }\n\n    } catch(error){\n        return error;\n\n    }\n}\n\n// export const fetchDailyData = async () => {\n//     try {\n//       const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n  \n//       return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n//     } catch (error) {\n//       return error;\n//     }\n//   };\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n    } catch (error) {\n        return error;\n    }\n};\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n\n\n    } catch(error){\n        return error;\n\n    }\n}","import React, {useState, useEffect } from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(() => {\n        const fetchAPI = async () =>{\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n\n    }, []);\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line\n                    data={{\n                        labels: dailyData.map(({date}) => date),\n                        datasets: [{\n                            data: dailyData.map(({confirmed}) => confirmed),\n                            label: 'Infected',\n                            borderColor: 'rgba(0,0,255,0.3)',\n                            backgroundColor: 'rgba(0,0,255,0.3)',\n                            fill: true\n                        }, {\n                            data: dailyData.map(({deaths}) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'rgba(255,0,0,0.5)',\n                            backgroundColor: 'rgba(255,0,0,0.5)',\n                            fill: true\n                        }],\n                    }}\n                />) : null\n    );\n    const barChart = (\n        confirmed\n            ? (\n                <Bar\n                    data={{\n                        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                        datasets: [{\n                            label: \"People\",\n                            backgroundColor: [\n                                'rgba(0,0,255,0.5)',\n                                'rgba(0,255,0,0.5)',\n                                'rgba(255,0,0,0.5)',\n                            ],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }]\n                \n                    }}\n                    options={{\n                        legend: {display: false},\n                        title: {display: true, text: `Current state in ${country}`}\n                    }}\n                />\n            ) : null\n    )\n\n\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\nexport default Chart;","import React, {useState, useEffect } from 'react';\nimport {NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(()=> {\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n        \n    }, [setFetchedCountries]);\n\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i)=> <option key={i} value={country}> {country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/covid4.9e5d4fc7.png\";","import React from 'react';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport covid4 from './images/covid4.png';\n\n\n\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: \"\",\n  }\n\n  async componentDidMount(){\n\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData})\n\n  }\n\n  handleCountryChange = async (country)=>{\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country: country});\n    //fetch data\n    //set state\n  }\n  render() {\n\n    const {data, country} = this.state;\n    return (\n      <div  className={styles.container}>\n        <img className={styles.image} src={covid4} alt=\"COVID-19\"/>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}